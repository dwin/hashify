// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Hash Digest of Input using given algorithm and digest encoding format
	// (GET /hash/{algorithm}/{digestFormat})
	GetHashAlgorithmDigestFormat(ctx echo.Context, algorithm DigestAlgorithms, digestFormat DigestFormats, params GetHashAlgorithmDigestFormatParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHashAlgorithmDigestFormat converts echo context to params.
func (w *ServerInterfaceWrapper) GetHashAlgorithmDigestFormat(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "algorithm" -------------
	var algorithm DigestAlgorithms

	err = runtime.BindStyledParameterWithLocation("simple", false, "algorithm", runtime.ParamLocationPath, ctx.Param("algorithm"), &algorithm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter algorithm: %s", err))
	}

	// ------------- Path parameter "digestFormat" -------------
	var digestFormat DigestFormats

	err = runtime.BindStyledParameterWithLocation("simple", false, "digestFormat", runtime.ParamLocationPath, ctx.Param("digestFormat"), &digestFormat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digestFormat: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHashAlgorithmDigestFormatParams
	// ------------- Required query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, true, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", ctx.QueryParams(), &params.Key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x-hashify-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-hashify-key")]; found {
		var XHashifyKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-hashify-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-hashify-key", runtime.ParamLocationHeader, valueList[0], &XHashifyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-hashify-key: %s", err))
		}

		params.XHashifyKey = &XHashifyKey
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHashAlgorithmDigestFormat(ctx, algorithm, digestFormat, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hash/:algorithm/:digestFormat", wrapper.GetHashAlgorithmDigestFormat)

}

type GetHashAlgorithmDigestFormatRequestObject struct {
	Algorithm    DigestAlgorithms `json:"algorithm"`
	DigestFormat DigestFormats    `json:"digestFormat"`
	Params       GetHashAlgorithmDigestFormatParams
}

type GetHashAlgorithmDigestFormatResponseObject interface {
	VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error
}

type GetHashAlgorithmDigestFormat200JSONResponse SuccessResponseContent

func (response GetHashAlgorithmDigestFormat200JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHashAlgorithmDigestFormat400JSONResponse ErrorResponseContent

func (response GetHashAlgorithmDigestFormat400JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHashAlgorithmDigestFormat404JSONResponse ErrorResponseContent

func (response GetHashAlgorithmDigestFormat404JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Hash Digest of Input using given algorithm and digest encoding format
	// (GET /hash/{algorithm}/{digestFormat})
	GetHashAlgorithmDigestFormat(ctx context.Context, request GetHashAlgorithmDigestFormatRequestObject) (GetHashAlgorithmDigestFormatResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHashAlgorithmDigestFormat operation middleware
func (sh *strictHandler) GetHashAlgorithmDigestFormat(ctx echo.Context, algorithm DigestAlgorithms, digestFormat DigestFormats, params GetHashAlgorithmDigestFormatParams) error {
	var request GetHashAlgorithmDigestFormatRequestObject

	request.Algorithm = algorithm
	request.DigestFormat = digestFormat
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHashAlgorithmDigestFormat(ctx.Request().Context(), request.(GetHashAlgorithmDigestFormatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHashAlgorithmDigestFormat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHashAlgorithmDigestFormatResponseObject); ok {
		return validResponse.VisitGetHashAlgorithmDigestFormatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3Y7bNhN9FWK+D9gbeWVJ1npXd5tkExv5QVEHbYFgL2hxLDErkQpJORYMv3tBUrbl",
	"rt1u0KLojU0Oh5zDM3OG2kIu60YKFEZDtgWdl1hTN3zDC9Tmviqk4qasnQ1FW0P2BV5V9Anj5ShObyA4",
	"zJLbyWCWRvFhpkdRfDuY+X0zXpTfaTejuhzdTP5g8BuGFr/p45uJ+00hgMXsPvJ/fm0xu/cYFrN7H94P",
	"Rsfl4fDgmziwjwGYrkHIQBvFRQG7oCfhrVQ19QQx1LnijeFSQAYWF2HOh6DIJeOiICvnDcGBrSXVmFg0",
	"duAu6getqiCAEjc2NG5o3VQ2ujWcgfKglFQ/o26k0PhaCoPCWESNkg0qw9Hhc17PgTozqVFrWiAMo83F",
	"mlackRluyC+0atHiJw1VtEaDilw9YXcVkLrVhjRKrjlD8oQdoZp8a1F13pVIRUqkzG74bWRp4atu9B67",
	"q+dX2R0scvkVc2Mvt2jzHLX+y+v5fFxIhF8kXBBTYp8GovBbi9ogC0hNTV7aDHnHB5HDxZTbxWwL/1e4",
	"ggz+Fx5lEvYaCU9rYxfAe+zOIMPNHoqlrdXIHMOOI1GcQ/DZGV4SfKDOM7RaExcrac/KpTA0d8wJWmNP",
	"GV915B03ZbuEAGw5ZlAa0+gsDAtnvs5lHbLvXISldw8Z13mrNZfC3bniOQqNg3M/zj+TD731pYcuK7kM",
	"a8pF+GH++uHT4sEebbiphkDvf5pDAGtU2jMbXY+vx9ZRNihowyGDxJkCaKgpXb24COGW7nnahVs2SNvO",
	"+hToaLFlRm3S5gwyeIfGxj0QPEy2C9DrQ0P2ZXsi3qqSv0pVMbDkQwZOJRDs6VlbjUEAti65QgaZUS0G",
	"fee1QJ7J5cdL6ognvrmN6TiKaHqXjJMEaRKxaZrQeLlKWMSmN3c4nS7zNJ7GaZzEdxTTKKI0mo7ZJJqm",
	"6YVbPKGd/Mcx+4Z0BL0Z9fU2egF8d4Kto+P+QxX9afp+VLVnQ7HTcvs70Q4NavdoD/IN1okjHo/3raFv",
	"trRpKp47FYRftU3c9oWxLjRw14NOK6H3JHsoVsGTfxDJ2XfyDI5XlO0fBw9h8q9D+CQNeStbwVz31m1d",
	"U9X55kOGL5pckbloWkNabZ+vgq9RkEM1EirYpY8QF1SjWu871Wk/pg2/7jVxLdDA7nH3ewAAAP//oms+",
	"+RIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
