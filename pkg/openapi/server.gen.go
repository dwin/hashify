// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Hash Digest of Input using given algorithm and digest encoding format
	// (GET /hash/{algorithm}/{digestFormat})
	GetHashAlgorithmDigestFormat(ctx echo.Context, algorithm HashAlgorithmName, digestFormat DigestFormats, params GetHashAlgorithmDigestFormatParams) error
	// Hash Key Generator
	// (GET /keygen/{keyLength})
	GetKeygenKeyLength(ctx echo.Context, keyLength int) error
	// List Hashing Algorithms
	// (GET /methods)
	GetMethods(ctx echo.Context) error
	// Status Check
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHashAlgorithmDigestFormat converts echo context to params.
func (w *ServerInterfaceWrapper) GetHashAlgorithmDigestFormat(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "algorithm" -------------
	var algorithm HashAlgorithmName

	err = runtime.BindStyledParameterWithLocation("simple", false, "algorithm", runtime.ParamLocationPath, ctx.Param("algorithm"), &algorithm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter algorithm: %s", err))
	}

	// ------------- Path parameter "digestFormat" -------------
	var digestFormat DigestFormats

	err = runtime.BindStyledParameterWithLocation("simple", false, "digestFormat", runtime.ParamLocationPath, ctx.Param("digestFormat"), &digestFormat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digestFormat: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHashAlgorithmDigestFormatParams
	// ------------- Required query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, true, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", ctx.QueryParams(), &params.Key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHashAlgorithmDigestFormat(ctx, algorithm, digestFormat, params)
	return err
}

// GetKeygenKeyLength converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeygenKeyLength(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyLength" -------------
	var keyLength int

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyLength", runtime.ParamLocationPath, ctx.Param("keyLength"), &keyLength)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyLength: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKeygenKeyLength(ctx, keyLength)
	return err
}

// GetMethods converts echo context to params.
func (w *ServerInterfaceWrapper) GetMethods(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMethods(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hash/:algorithm/:digestFormat", wrapper.GetHashAlgorithmDigestFormat)
	router.GET(baseURL+"/keygen/:keyLength", wrapper.GetKeygenKeyLength)
	router.GET(baseURL+"/methods", wrapper.GetMethods)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

type GetHashAlgorithmDigestFormatRequestObject struct {
	Algorithm    HashAlgorithmName `json:"algorithm"`
	DigestFormat DigestFormats     `json:"digestFormat"`
	Params       GetHashAlgorithmDigestFormatParams
}

type GetHashAlgorithmDigestFormatResponseObject interface {
	VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error
}

type GetHashAlgorithmDigestFormat200JSONResponse SuccessResponseContent

func (response GetHashAlgorithmDigestFormat200JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHashAlgorithmDigestFormat400JSONResponse ErrorResponseContent

func (response GetHashAlgorithmDigestFormat400JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHashAlgorithmDigestFormat404JSONResponse ErrorResponseContent

func (response GetHashAlgorithmDigestFormat404JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetHashAlgorithmDigestFormat500JSONResponse ErrorResponseContent

func (response GetHashAlgorithmDigestFormat500JSONResponse) VisitGetHashAlgorithmDigestFormatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeygenKeyLengthRequestObject struct {
	KeyLength int `json:"keyLength"`
}

type GetKeygenKeyLengthResponseObject interface {
	VisitGetKeygenKeyLengthResponse(w http.ResponseWriter) error
}

type GetKeygenKeyLength200JSONResponse struct {
	// KeyHex Hex format key
	KeyHex string `json:"KeyHex"`

	// Length Length of key in bytes
	Length int `json:"Length"`
}

func (response GetKeygenKeyLength200JSONResponse) VisitGetKeygenKeyLengthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeygenKeyLength400JSONResponse ErrorResponseContent

func (response GetKeygenKeyLength400JSONResponse) VisitGetKeygenKeyLengthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeygenKeyLength500JSONResponse ErrorResponseContent

func (response GetKeygenKeyLength500JSONResponse) VisitGetKeygenKeyLengthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMethodsRequestObject struct {
}

type GetMethodsResponseObject interface {
	VisitGetMethodsResponse(w http.ResponseWriter) error
}

type GetMethods200ResponseHeaders struct {
	ContentType string
}

type GetMethods200JSONResponse struct {
	Body    []HashAlgorithm
	Headers GetMethods200ResponseHeaders
}

func (response GetMethods200JSONResponse) VisitGetMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", fmt.Sprint(response.Headers.ContentType))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse struct {
	HashesGenerated int64  `json:"hashesGenerated"`
	KeysGenerated   int64  `json:"keysGenerated"`
	Status          string `json:"status"`
	Uptime          string `json:"uptime"`
}

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Hash Digest of Input using given algorithm and digest encoding format
	// (GET /hash/{algorithm}/{digestFormat})
	GetHashAlgorithmDigestFormat(ctx context.Context, request GetHashAlgorithmDigestFormatRequestObject) (GetHashAlgorithmDigestFormatResponseObject, error)
	// Hash Key Generator
	// (GET /keygen/{keyLength})
	GetKeygenKeyLength(ctx context.Context, request GetKeygenKeyLengthRequestObject) (GetKeygenKeyLengthResponseObject, error)
	// List Hashing Algorithms
	// (GET /methods)
	GetMethods(ctx context.Context, request GetMethodsRequestObject) (GetMethodsResponseObject, error)
	// Status Check
	// (GET /status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHashAlgorithmDigestFormat operation middleware
func (sh *strictHandler) GetHashAlgorithmDigestFormat(ctx echo.Context, algorithm HashAlgorithmName, digestFormat DigestFormats, params GetHashAlgorithmDigestFormatParams) error {
	var request GetHashAlgorithmDigestFormatRequestObject

	request.Algorithm = algorithm
	request.DigestFormat = digestFormat
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHashAlgorithmDigestFormat(ctx.Request().Context(), request.(GetHashAlgorithmDigestFormatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHashAlgorithmDigestFormat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHashAlgorithmDigestFormatResponseObject); ok {
		return validResponse.VisitGetHashAlgorithmDigestFormatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetKeygenKeyLength operation middleware
func (sh *strictHandler) GetKeygenKeyLength(ctx echo.Context, keyLength int) error {
	var request GetKeygenKeyLengthRequestObject

	request.KeyLength = keyLength

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeygenKeyLength(ctx.Request().Context(), request.(GetKeygenKeyLengthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeygenKeyLength")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetKeygenKeyLengthResponseObject); ok {
		return validResponse.VisitGetKeygenKeyLengthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetMethods operation middleware
func (sh *strictHandler) GetMethods(ctx echo.Context) error {
	var request GetMethodsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMethods(ctx.Request().Context(), request.(GetMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMethods")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMethodsResponseObject); ok {
		return validResponse.VisitGetMethodsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(ctx echo.Context) error {
	var request GetStatusRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx.Request().Context(), request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		return validResponse.VisitGetStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
